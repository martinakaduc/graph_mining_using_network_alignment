CheckAlignment()
--------------------------------------------
Input:
Graph_db: Graph database
Alignment: Alignment between 2 graph in circular [align_01, align_12...]
Theta: the minimum percentage of appearance of the common subgraph in graph database
--------------------------------------------
Output:
Maximal common subgraph
--------------------------------------------
Subgraph_db = ConstructSubgraphs(Graphs_db, Alignment)

Candidate_subgraph = ChooseCandidateSubgraph(Subgraph_db) #Để tối ưu thì Theta lớn sẽ chọn subgraph có số node ít nhất và ngược lại

For connection in Candidate_subgraph: # Connection là check sự liên kết giữa 2 nút
  connection_set = [connection] # {label_edge:frequent} {0:1, 3:1, 2:1, 10:2}

  For align in Alignment:
    map_connection = GetMap(connection, align)
    Append map_connection to connection_set

  max_frequent_connection = Find maximum frequent connection

  If max_frequent_connection > (Theta * Number of graphs in Graphs_db):
    Modify connection in Candidate_subgraph
  Else:
    Delete edge corresponding to connection in Candidate_subgraph

Recheck Candidate_subgraph to ensure it is connected

If Candidate_subgraph has no external associative edges:
  FrequentEdgesSet = Find frequent edges which are not in Candidate_subgraph

  ExpandGraph(Candidate_subgraph, FrequentEdgesSet)
